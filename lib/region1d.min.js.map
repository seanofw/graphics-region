{"version":3,"file":"region1d.js","sources":["../src/region1d.js"],"names":["Region1D","pInf","Number","POSITIVE_INFINITY","nInf","NEGATIVE_INFINITY","makeProtectedData","protectedData","expectedKey","actualKey","isArray","o","Array","makeCoordinateGenerator","array1","array2","i1","i2","length","x","kind","src","combineData","op","getNext","depth1","depth2","state","lastState","coord","result","nextCoord","push","unionData","intersectData","xorData","subtractData","relateData","earlyOut","isPointInData","array","i","l","start","end","index","midpt","value","notData","newArray","transformData","ratio","delta","arrayEquals","makeRects","minY","maxY","height","minX","maxX","y","width","left","top","right","bottom","makeRawSpans","makeHashCode","hash","verifyRegion1DType","obj","console","error","validateData","typeError","typeErrorMsg","dataError","dataErrorMsg","prev","cur","privateKey","getData","region","_opaque","key","min","max","prototype","union","other","data","otherData","intersect","subtract","xor","not","transform","scale","offset","translate","isEmpty","getCount","doesIntersect","relate","isPointIn","equals","getRawSpans","getAsRects","destArray","getBounds","getHashCode","empty","this"],"mappings":"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","sourcesContent":["/**\r\n * Region1D objects are semi-opaque data structures that represent a 1-dimensional\r\n * set on the number line, described using \"spans\" of included points.\r\n *\r\n * ------------------------------------------------------------------------------------------------\r\n *\r\n * Each span in the region has an inclusive start and an exclusive end.  Spans may\r\n * not overlap, and always must appear in sorted order.  So, for example, consider\r\n * this set:\r\n *\r\n *           #####  ####      ###########       ####     #\r\n *        |----+----|----+----|----+----|----+----|----+----|\r\n *       0     5   10   15   20   25   30   35   40   45   50\r\n *\r\n * This set (inclusively) contains the numbers 3-7, 10-13, 20-30, 38-41, and 47.\r\n * Its Region1D representation (using only integer values) would therefore\r\n * consist of these ranges:\r\n *\r\n *   [3,8); [10,14); [20,31); [38,42); [47,48)\r\n *\r\n * And thus the resulting data array stored by the Region1D object would be:\r\n *\r\n *   [3, 8, 10, 14, 20, 31, 38, 42, 47, 48]\r\n *\r\n * Note that when you construct a Region1D, you *must* provide the data array\r\n * in sorted order, or the Region1D's constraints will be violated.\r\n *\r\n * ------------------------------------------------------------------------------------------------\r\n *\r\n * Region1Ds provide many operations that can be used to manipulate their\r\n * data as formal sets, including:\r\n *\r\n *   result = a.union(b);           // Return a new set that is the logical union of the two sets.\r\n *   result = a.intersect(b);       // Return a new set that is the logical intersection of the two sets.\r\n *   result = a.subtract(b);        // Return the logical subtraction of the two sets, i.e., the\r\n *                                  //   equivalent of a.union(b.not()), but computed more efficiently.\r\n *   result = a.xor(b);             // Return the exclusive-or of the two sets, i.e., those ranges\r\n *                                  //   which exist in one set or the other but not both.\r\n *   result = a.not();              // Return the logical complement of the set (which may include infinity).\r\n *   result = a.isEmpty();          // Return true/false if the set is empty.\r\n *   result = a.isPointIn(x);       // Return true if the given coordinate is contained within the set.\r\n *   result = a.doesIntersect(b);   // Return true if the logical intersection of the two sets is nonempty.  This is\r\n *                                  //   more efficient than performing \"!a.intersect(b).isEmpty()\".\r\n *   result = a.equals(b);          // Return true if the sets are identical.\r\n *   result = a.getBounds(b);       // Return { min:, max: } of the Region1D.\r\n *   result = a.getAsRects(minY, maxY); // Return an array of { x:, y:, width:, height: } rectangles describing the Region1D.\r\n *   result = a.getRawSpans();      // Return a raw array of numbers, the same kind that was used to construct the Region1D.\r\n *\r\n * All Region1D operations are carefully written to be bounded in both time and\r\n * space, and all will run in no worse than O(n) or O(n+m) time.\r\n */\r\nconst Region1D = (function() {\r\n\t\r\n\tconst\r\n\r\n\t//---------------------------------------------------------------------------------------------\r\n\t// Global constants.\r\n\t\r\n\t// Precache positive/negative infinity locally.\r\n\tpInf = Number.POSITIVE_INFINITY,\r\n\tnInf = Number.NEGATIVE_INFINITY,\r\n\r\n\t//---------------------------------------------------------------------------------------------\r\n\t// Helper functions.\r\n\r\n\t/**\r\n\t * Construct a wrapper around the given private data that makes it opaque except for \r\n\t * those with access to the 'expectedKey'.\r\n\t */\r\n\tmakeProtectedData = function(protectedData, expectedKey) {\r\n\t\treturn function(actualKey) {\r\n\t\t\tif (actualKey === expectedKey) return protectedData;\r\n\t\t\telse throw \"Illegal access\";\r\n\t\t};\r\n\t},\r\n\r\n\t/**\r\n\t * Determine if the given object is an array. This is provided in newer JavaScript environs,\r\n\t * but is notably lacking in older ones.  We avoid a dependency on a huge package like CoreJS\r\n\t * by just defining the shim here.\r\n\t */\r\n\tisArray = function(o) {\r\n\t\treturn Array.isArray ? Array.isArray(o) : o instanceof Array;\r\n\t},\r\n\t\r\n\t//---------------------------------------------------------------------------------------------\r\n\t// 1-D raw-data-manipulation functions.\r\n\r\n\t/**\r\n\t * Make a function that generates successive lowest values from each of the two given arrays.\r\n\t */\r\n\tmakeCoordinateGenerator = function(array1, array2) {\r\n\t\tlet i1 = 0, i2 = 0;\r\n\t\t\r\n\t\t// Get the next coordinate with the lowest value from either array, keeping\r\n\t\t// track of whether it is a begin (+1) or end (-1) coordinate of its span.  O(1).\r\n\t\treturn function() {\r\n\t\t\tif (i1 >= array1.length && i2 >= array2.length)\r\n\t\t\t\treturn null;\r\n\t\t\telse if (i1 >= array1.length)\r\n\t\t\t\treturn { x: array2[i2], kind: i2++ & 1 ? -1 : +1, src: 2 };\r\n\t\t\telse if (i2 >= array2.length || array1[i1] < array2[i2])\r\n\t\t\t\treturn { x: array1[i1], kind: i1++ & 1 ? -1 : +1, src: 1 };\r\n\t\t\telse\r\n\t\t\t\treturn { x: array2[i2], kind: i2++ & 1 ? -1 : +1, src: 2 };\r\n\t\t};\r\n\t},\r\n\r\n\t/**\r\n\t * Calculate the combination of the given (sorted!) arrays of 1-D region data.\r\n\t * Returns a new array that contains the 1-D combination.\r\n\t */\r\n\tcombineData = function(array1, array2, op) {\r\n\r\n\t\t// Special case: Nothin' from nothin' gives nothin'.\r\n\t\tif (!array1.length && !array2.length)\r\n\t\t\treturn [];\r\n\r\n\t\t// Get the next coordinate with the lowest value from either array, keeping\r\n\t\t// track of whether it is a begin (+1) or end (-1) coordinate of its span.  O(1).\r\n\t\tconst getNext = makeCoordinateGenerator(array1, array2);\r\n\t\t\r\n\t\tlet depth1 = 0, depth2 = 0;\r\n\t\tlet state = 0, lastState = 0;\r\n\r\n\t\t// Do whatever needs to happen at the very first coordinate.\r\n\t\tlet coord = getNext();\r\n\t\t\r\n\t\t// Process all of the coordinates until both arrays are empty, collecting\r\n\t\t// new spans in the 'result' array.  O(n+m).\r\n\t\tconst result = [];\r\n\t\tdo {\r\n\t\t\t// Do whatever happens at this coordinate.\r\n\t\t\tif (coord.src === 1) depth1 += coord.kind;\r\n\t\t\telse depth2 += coord.kind;\r\n\r\n\t\t\t// Process any subsequent coordinates at the same 'x' offset,\r\n\t\t\t// also collecting the one after it.\r\n\t\t\tlet nextCoord;\r\n\t\t\twhile ((nextCoord = getNext()) && nextCoord.x === coord.x) {\r\n\t\t\t\tif (nextCoord.src === 1) depth1 += nextCoord.kind;\r\n\t\t\t\telse depth2 += nextCoord.kind;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Change the state to match whatever happened here.\r\n\t\t\tlastState = state;\r\n\t\t\tstate = op(depth1, depth2);\r\n\r\n\t\t\t// If we entered/exited a new span, emit a start/end X value.\r\n\t\t\tif (state !== lastState) {\r\n\t\t\t\tresult.push(coord.x);\r\n\t\t\t}\r\n\r\n\t\t\tcoord = nextCoord;\r\n\t\t} while (coord);\r\n\r\n\t\treturn result;\r\n\t},\r\n\r\n\t/**\r\n\t * Calculate the union of the given arrays of 1-D region data.\r\n\t * Returns a new array that contains the 1-D union.\r\n\t */\r\n\tunionData = (array1, array2) => combineData(array1, array2,\r\n\t\t(depth1, depth2) => (depth1 | depth2)\r\n\t),\r\n\r\n\t/**\r\n\t * Calculate the intersection of the given arrays of 1-D region data.\r\n\t * Returns a new array that contains the 1-D intersection.\r\n\t */\r\n\tintersectData = (array1, array2) => combineData(array1, array2,\r\n\t\t(depth1, depth2) => (depth1 & depth2)\r\n\t),\r\n\r\n\t/**\r\n\t * Calculate the exclusive-or of the given arrays of 1-D region data.\r\n\t * Returns a new array that contains the 1-D exclusive-or.\r\n\t */\r\n\txorData = (array1, array2) => combineData(array1, array2,\r\n\t\t(depth1, depth2) => (depth1 ^ depth2)\r\n\t),\r\n\r\n\t/**\r\n\t * Calculate the difference of the given arrays of 1-D region data.\r\n\t * Returns a new array that contains the 1-D difference.\r\n\t */\r\n\tsubtractData = (array1, array2) => combineData(array1, array2,\r\n\t\t(depth1, depth2) => (depth1 & ~depth2)\r\n\t),\r\n\r\n\t/**\r\n\t * Calculate whether the given arrays of 1-D region data intersect, and\r\n\t * if so, how.  This requires constant memory, but it may take O(n+m) time.\r\n\t * \r\n\t * If 'earlyOut' is true, this will return only '' or 'intersects', and\r\n\t * it will return that answer as soon as it possibly can, skipping testing\r\n\t * successive data if possible.\r\n\t * \r\n\t * Returns one of:\r\n\t *    '': no intersection\r\n\t *    'intersect': there is at least some kind of intersection\r\n\t *    'a-contain-b': array1 is a proper superset of array2\r\n\t *    'b-contain-a': array2 is a proper superset of array1\r\n\t *    'equal': array1 and array2 represent the same exact region\r\n\t */\r\n\trelateData = function(array1, array2, earlyOut) {\r\n\t\t\r\n\t\t// If either is empty, there's no intersection.\r\n\t\tif (!array1.length || !array2.length) return '';\r\n\t\t\r\n\t\t// If all of the spans of one are before all of the spans of another, there's no intersection.\r\n\t\tif (array1[array1.length - 1] < array2[0]\r\n\t\t\t|| array2[array2.length - 1] < array1[0]) return '';\r\n\t\t\t\r\n\t\t// Test all the spans against each other.\r\n\t\tlet depth1 = 0, depth2 = 0;\r\n\t\tconst getNext = makeCoordinateGenerator(array1, array2);\r\n\r\n\t\t// Do whatever needs to happen at the very first coordinate.\r\n\t\tlet coord = getNext();\r\n\r\n\t\t// Bit flags:  We start out assuming A and B both contain each other, but there\r\n\t\t// is not yet an intersection.  It's weird, but go with it.\r\n\t\tlet result = 3;\r\n\r\n\t\tdo {\r\n\t\t\t// Do whatever happens at this coordinate.\r\n\t\t\tif (coord.src === 1) depth1 += coord.kind;\r\n\t\t\telse depth2 += coord.kind;\r\n\r\n\t\t\t// Process any subsequent coordinates at the same 'x' offset,\r\n\t\t\t// also collecting the one after it.\r\n\t\t\tlet nextCoord;\r\n\t\t\twhile ((nextCoord = getNext()) && nextCoord.x === coord.x) {\r\n\t\t\t\tif (nextCoord.src === 1) depth1 += nextCoord.kind;\r\n\t\t\t\telse depth2 += nextCoord.kind;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Change the state to match whatever happened here.\r\n\t\t\tif (depth1 & depth2) {\r\n\t\t\t\t// Got an intersection.\r\n\t\t\t\tresult |= 4;\r\n\t\t\t\tif (earlyOut) return 'intersect';\r\n\t\t\t}\r\n\t\t\telse if (depth2 & ~depth1) {\r\n\t\t\t\t// A does not contain B.\r\n\t\t\t\tresult &= ~1;\r\n\t\t\t}\r\n\t\t\telse if (depth1 & ~depth2) {\r\n\t\t\t\t// B does not contain A.\r\n\t\t\t\tresult &= ~2;\r\n\t\t\t}\r\n\r\n\t\t\tcoord = nextCoord;\r\n\t\t} while (coord);\r\n\r\n\t\t// Choose an answer based on the resulting flag bits.\r\n\t\tswitch (result) {\r\n\t\t\tcase 4: return 'intersect';\t\t// 1 0 0\r\n\t\t\tcase 5: return 'a-contain-b';\t// 1 0 1\r\n\t\t\tcase 6: return 'b-contain-a';\t// 1 1 0\r\n\t\t\tcase 7: return 'equal';\t\t\t// 1 1 1\r\n\t\t\tdefault: return '';\t\t\t\t// 0 * *\r\n\t\t}\r\n\t},\r\n\r\n\t/**\r\n\t * Determine whether the given point lies within the spans of the Region1D data.\r\n\t */\r\n\tisPointInData = function(array, x) {\r\n\t\t// It can't be in the empty set.\r\n\t\tif (!array.length) return false;\r\n\t\t\r\n\t\t// If it's outside the bounds, it's not anywhere within any of the spans.\r\n\t\tif (x < array[0] || x > array[array.length - 1]) return false;\r\n\t\t\r\n\t\tif (array.length <= 8) {\r\n\t\t\t// Spin over all the spans in a simple linear search.\r\n\t\t\tfor (let i = 0, l = array.length; i < l; i += 2) {\r\n\t\t\t\tif (x >= array[i] && x < array[i+1]) return true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Binary search to find the array index that x is either after or at.\r\n\t\t\tlet start = 0, end = array.length;\r\n\t\t\tlet index = 0;\r\n\t\t\twhile (start < end) {\r\n\t\t\t\tconst midpt = ((start + end) / 2) & ~0;\r\n\t\t\t\tconst value = array[midpt];\r\n\t\t\t\tif (x === value) {\r\n\t\t\t\t\tindex = midpt;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\telse if (x < value) {\r\n\t\t\t\t\tend = midpt;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tindex = midpt;\r\n\t\t\t\t\tstart = midpt + 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// 'index' now is the closest value at or before 'x', so we just need to see if\r\n\t\t\t// it's an odd or even array index to know if 'x' is inside the span or outside it.\r\n\t\t\treturn !(index & 1);\r\n\t\t}\r\n\t},\r\n\t\r\n\t/**\r\n\t * Calculate a complement of the 1-D (sorted!) region data.\r\n\t * This is easy:\r\n\t *    If it starts with -Inf, remove that; otherwise, prepend -Inf.\r\n\t *    If it ends with +Inf, remove that; otherwise, append +Inf.\r\n\t * Returns a new array that contains the 1D complement.\r\n\t */\r\n\tnotData = function(array) {\r\n\t\tconst newArray = [];\r\n\r\n\t\tlet src = 0;\r\n\r\n\t\tif (!array.length) {\r\n\t\t\tnewArray.push(nInf);\r\n\t\t\tnewArray.push(pInf);\r\n\t\t\treturn newArray;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (array[src] != nInf) newArray.push(nInf);\r\n\t\t\telse src++;\r\n\t\t}\r\n\r\n\t\twhile (src < array.length - 1) {\r\n\t\t\tnewArray.push(array[src++]);\r\n\t\t}\r\n\r\n\t\tif (array[src] != pInf) {\r\n\t\t\tnewArray.push(array[src++]);\r\n\t\t\tnewArray.push(pInf);\r\n\t\t}\r\n\t\t\r\n\t\treturn newArray;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Calculate a new region whose coordinates have all been translated/scaled by the given amounts.\r\n\t */\r\n\ttransformData = function(array, ratio, delta) {\r\n\t\tdelta = Number(delta);\r\n\t\tif (!(nInf < delta && delta < pInf))\t// Catches other NaNs as well as infinities.\r\n\t\t\tthrow \"Invalid translation delta\";\r\n\t\tratio = Number(ratio);\r\n\t\tif (!(nInf < ratio && ratio < pInf) || ratio === 0)\t\t// Catches other NaNs as well as infinities.\r\n\t\t\tthrow \"Invalid scale ratio\";\r\n\r\n\t\tconst newArray = [];\r\n\t\tfor (let i = 0, l = array.length; i < l; i++) {\r\n\t\t\tnewArray[i] = array[i] * ratio + delta;\r\n\t\t}\r\n\t\t\r\n\t\treturn newArray;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Determine if two arrays of (sorted!) 1-D region data are equivalent.\r\n\t * Returns true if they are the same, false if they are different.\r\n\t */\r\n\tarrayEquals = function(array1, array2) {\r\n\t\tif (array1.length != array2.length) return false;\r\n\t\tfor (let i = 0, l = array1.length; i < l; i++) {\r\n\t\t\tif (array1[i] != array2[i]) return false;\r\n\t\t}\r\n\t\treturn true;\r\n\t},\r\n\r\n\t/**\r\n\t * Transform a set of 1-D region data into an array of rectangles with\r\n\t * the given same y and height values.\r\n\t *\r\n\t * Returns a new array that contains rectangles of the form { x:, y:, width:, height:, left:, top:, right:, bottom: }.\r\n\t */\r\n\tmakeRects = function(array, minY, maxY, result) {\r\n\t\tconst height = maxY - minY;\r\n\t\t\r\n\t\tfor (let i = 0, l = array.length; i < l; i += 2) {\r\n\t\t\tconst minX = array[i  ];\r\n\t\t\tconst maxX = array[i+1];\r\n\t\t\tresult.push({\r\n\t\t\t\tx: minX, y: minY, width: maxX - minX, height:height,\r\n\t\t\t\tleft: minX, top: minY, right: maxX, bottom: maxY\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t},\r\n\r\n\t/**\r\n\t * Clone a set of 1-D region data into a raw array.\r\n\t * Returns a new array that contains pairs of points.\r\n\t */\r\n\tmakeRawSpans = function(array) {\r\n\t\tconst result = [];\r\n\t\tfor (let i = 0, l = array.length; i < l; i += 2) {\r\n\t\t\tresult.push(array[i  ]);\r\n\t\t\tresult.push(array[i+1]);\r\n\t\t}\r\n\t\treturn result;\r\n\t},\r\n\r\n\t/**\r\n\t * Calculate a hash that (loosely) describes the given Region1D of data, so that we\r\n\t * can readily tell whether it is different from another.\r\n\t */\r\n\tmakeHashCode = function(array) {\r\n\t\tlet hash = 0;\r\n\t\tfor (let i = 0, l = array.length; i < l; i++) {\r\n\t\t\thash *= 23;\r\n\t\t\thash += array[i] | 0;\r\n\t\t\thash &= ~0;\r\n\t\t}\r\n\t\treturn hash;\r\n\t},\r\n\t\r\n\t/**\r\n\t * Check to ensure that the given object is actually a Region1D, and abort if it is not.\r\n\t */\r\n\tverifyRegion1DType = function(obj) {\r\n\t\tif (!(obj instanceof Region1D)) {\r\n\t\t\tconsole.error(\"Object must be a Region1D instance.\");\r\n\t\t\tthrow \"Type error\";\r\n\t\t}\r\n\t},\r\n\t\r\n\t/**\r\n\t * Check the given data to make sure that it consists of an array of ordered pairs\r\n\t * of span start/end points.\r\n\t */\r\n\tvalidateData = function(array) {\r\n\t\r\n\t\tconst typeError = \"Type error\";\r\n\t\tconst typeErrorMsg = \"Expected an ordered array of numeric start/end pairs.\";\r\n\t\tconst dataError = \"Data error\";\r\n\t\tconst dataErrorMsg = \"Array start/end pairs are not in strictly ascending order.\";\r\n\r\n\t\t// Make sure it's an array of even length.\r\n\t\tif (!isArray(array) || (array.length & 1)) {\r\n\t\t\tconsole.error(typeErrorMsg);\r\n\t\t\tthrow typeError;\r\n\t\t}\r\n\r\n\t\t// Empty array is always valid.\r\n\t\tif (array.length == 0) return;\r\n\r\n\t\t// Get the first entry, and make sure it's a number.\r\n\t\tlet prev = array[0];\r\n\t\tif (typeof prev !== 'number') {\r\n\t\t\tconsole.error(typeErrorMsg);\r\n\t\t\tthrow typeError;\r\n\t\t}\r\n\r\n\t\t// Check each successive entry to make sure that it's (A) a number and (B) strictly\r\n\t\t// greater than the entry before it.\r\n\t\tfor (let i = 1, l = array.length; i < l; i++) {\r\n\t\t\tlet cur = array[i];\r\n\t\t\tif (typeof cur !== 'number') {\r\n\t\t\t\tconsole.error(typeErrorMsg);\r\n\t\t\t\tthrow typeError;\r\n\t\t\t}\r\n\t\t\tif (cur <= prev) {\r\n\t\t\t\tconsole.error(dataErrorMsg);\r\n\t\t\t\tthrow dataError;\r\n\t\t\t}\r\n\t\t\tprev = cur;\r\n\t\t}\r\n\t},\r\n\t\r\n\t//---------------------------------------------------------------------------------------------\r\n\t// Public interface.\r\n\t\r\n\t/**\r\n\t * A special private object used to flag internal constructions in such a way that\r\n\t * external callers' data must be validated, but internal data can skip those checks.\r\n\t */\r\n\tprivateKey = {},\r\n\r\n\t/**\r\n\t * Access the internal data, if this is an allowed thing to do.\r\n\t */\r\n\tgetData = function(region) {\r\n\t\treturn region._opaque(privateKey);\r\n\t},\r\n\r\n\t/**\r\n\t * Construct a 1-D region from the given array of start/end X coordinates.  This is a\r\n\t * proper object, with prototype methods for performing operations like\r\n\t * union/intersect/subtract/xor.\r\n\t *\r\n\t * Usage:  new Region1D(array)\r\n\t *\r\n\t * @param array {Array} - The array of span endpoints, in pairs of start (inclusive)\r\n\t *        and end (exclusive) X-coordinates.\r\n\t */\r\n\tRegion1D = function(array, key, hash) {\r\n\t\r\n\t\t// Internal-only second parameter: A 'key' flag, indicating this data came from an\r\n\t\t// internal operation and does not require validation for correctness.\r\n\t\tif (key === privateKey) {\r\n\t\t\r\n\t\t\t// Internal-only third parameter: A hash for comparisons.\r\n\t\t\tif (typeof hash !== 'number')\r\n\t\t\t\thash = makeHashCode(array);\r\n\t\t}\r\n\t\telse if (typeof key !== 'undefined' || typeof hash !== 'undefined') {\r\n\t\t\t// You're not allowed to specify a key unless it's the right one.\r\n\t\t\tthrow \"Illegal access\";\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Verify that the user passed us data that makes sense.\r\n\t\t\tvalidateData(array);\r\n\t\t\thash = makeHashCode(array);\r\n\t\t}\r\n\r\n\t\tthis._opaque = makeProtectedData({\r\n\t\t\tarray: array,\r\n\t\t\tmin: array.length ? array[0] : pInf,\r\n\t\t\tmax: array.length ? array[array.length - 1] : nInf,\r\n\t\t\thash: hash\r\n\t\t}, privateKey);\r\n\t};\r\n\t\r\n\t/**\r\n\t * The row's prototype contains helpers that simply invoke the private operations\r\n\t * to do all the hard work.\r\n\t */\r\n\tRegion1D.prototype = {\r\n\t\tunion: function(other) {\r\n\t\t\tverifyRegion1DType(other);\r\n\t\t\tconst data = getData(this), otherData = getData(other);\r\n\t\t\treturn new Region1D(unionData(data.array, otherData.array), privateKey);\r\n\t\t},\r\n\t\tintersect: function(other) {\r\n\t\t\tverifyRegion1DType(other);\r\n\t\t\tconst data = getData(this), otherData = getData(other);\r\n\t\t\treturn new Region1D(intersectData(data.array, otherData.array), privateKey);\r\n\t\t},\r\n\t\tsubtract: function(other) {\r\n\t\t\tverifyRegion1DType(other);\r\n\t\t\tconst data = getData(this), otherData = getData(other);\r\n\t\t\treturn new Region1D(subtractData(data.array, otherData.array), privateKey);\r\n\t\t},\r\n\t\txor: function(other) {\r\n\t\t\tverifyRegion1DType(other);\r\n\t\t\tconst data = getData(this), otherData = getData(other);\r\n\t\t\treturn new Region1D(xorData(data.array, otherData.array), privateKey);\r\n\t\t},\r\n\t\tnot: function() {\r\n\t\t\tconst data = getData(this);\r\n\t\t\treturn new Region1D(notData(data.array), privateKey);\r\n\t\t},\r\n\t\ttransform: function(scale, offset) {\r\n\t\t\tconst data = getData(this);\r\n\t\t\treturn new Region1D(transformData(data.array, scale, offset));\t\t// No privateKey forces a data check, since we could have lost precision.\r\n\t\t},\r\n\t\ttranslate: function(offset) {\r\n\t\t\tconst data = getData(this);\r\n\t\t\treturn new Region1D(transformData(data.array, 1.0, offset));\t\t// No privateKey forces a data check, since we could have lost precision.\r\n\t\t},\r\n\t\tscale: function(scale) {\r\n\t\t\tconst data = getData(this);\r\n\t\t\treturn new Region1D(transformData(data.array, scale, 0));\t\t// No privateKey forces a data check, since we could have lost precision.\r\n\t\t},\r\n\t\tisEmpty: function() {\r\n\t\t\treturn !getData(this).array.length;\r\n\t\t},\r\n\t\tgetCount: function() {\r\n\t\t\treturn getData(this).array.length >> 1;\r\n\t\t},\r\n\t\tdoesIntersect: function(other) {\r\n\t\t\tverifyRegion1DType(other);\r\n\t\t\treturn !!relateData(getData(this).array, getData(other).array, true);\r\n\t\t},\r\n\t\trelate: function(other) {\r\n\t\t\tverifyRegion1DType(other);\r\n\t\t\treturn relateData(getData(this).array, getData(other).array, false);\r\n\t\t},\r\n\t\tisPointIn: function(x) {\r\n\t\t\treturn isPointInData(getData(this).array, Number(x));\r\n\t\t},\r\n\t\tequals: function(other) {\r\n\t\t\tverifyRegion1DType(other);\r\n\t\t\tconst data = getData(this), otherData = getData(other);\r\n\t\t\tif (data.hash != otherData.hash) return false;\r\n\t\t\treturn arrayEquals(data.array, otherData.array);\r\n\t\t},\r\n\t\tgetRawSpans: function() {\r\n\t\t\tconst data = getData(this);\r\n\t\t\treturn makeRawSpans(data.array);\r\n\t\t},\r\n\t\tgetAsRects: function(minY, maxY, destArray) {\r\n\t\t\tconst data = getData(this);\r\n\t\t\treturn makeRects(data.array, minY, maxY, destArray || []);\r\n\t\t},\r\n\t\tgetBounds: function() {\r\n\t\t\tconst data = getData(this);\r\n\t\t\treturn { min: data.min, max: data.max };\r\n\t\t},\r\n\t\tgetHashCode: function() {\r\n\t\t\treturn getData(this).hash;\r\n\t\t}\r\n\t};\r\n\r\n\t// Construct a convenient shareable 'empty' instance.\r\n\tRegion1D.empty = new Region1D([], privateKey, 0);\r\n\t\t\r\n\treturn Region1D;\r\n\r\n})();\r\n\r\nexport default Region1D;\r\n"]}